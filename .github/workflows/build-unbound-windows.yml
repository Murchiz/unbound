name: Build Unbound for Windows (Latest Release)

on:
  push:
    branches: [ main ] # Or your default branch
  pull_request:
    branches: [ main ] # Or your default branch
  workflow_dispatch: # Allows manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        # You might want to specify OpenSSL versions if Unbound has specific requirements
        # openssl_version: ['1.1.1', '3.0'] # Example
        arch: [x64] # Add x86 if needed and supported by your build process

    steps:
    - name: Checkout code (for workflow files)
      uses: actions/checkout@v4

    - name: Set up MSVC developer command prompt
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Install Chocolatey (Package Manager)
      uses: crazy-max/ghaction-chocolatey@v3
      with:
        args: '' # No specific packages to install via action args initially

    - name: Install Dependencies via Chocolatey
      run: |
        choco install -y openssl.light # Or full openssl if needed. Check Unbound docs.
        # choco install -y expat # If expat is required and not bundled or handled by OpenSSL
        # choco install -y strawberryperl # If perl is needed for configure scripts
        # choco install -y flex bison # If lex/yacc tools are needed for compilation from source
      # Note: For OpenSSL, ensure the installed version is compatible and its headers/libs are findable.
      # You might need to set environment variables like OPENSSL_ROOT_DIR or include paths.

    - name: Fetch Latest Unbound Release Tag
      id: get_latest_release
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: NLnetLabs/unbound
        excludes: prerelease, draft # Ensure we get stable releases

    - name: Display Latest Release Tag
      run: echo "Latest Unbound release is ${{ steps.get_latest_release.outputs.release }}"

    - name: Download and Extract Latest Unbound Release Source
      shell: pwsh
      run: |
        $LatestTag = "${{ steps.get_latest_release.outputs.release }}"
        $TarballName = "unbound-$($LatestTag.Replace('release-', '')).tar.gz" # Assuming 'release-X.Y.Z' tag format
        $DownloadUrl = "https://github.com/NLnetLabs/unbound/archive/refs/tags/$LatestTag.tar.gz"
        # Alternative direct download from NLnet Labs if available and preferred
        # $DownloadUrl = "https://nlnetlabs.nl/downloads/unbound/unbound-${{ steps.get_latest_release.outputs.release }}.tar.gz"
        Write-Host "Downloading Unbound version $LatestTag from $DownloadUrl"
        Invoke-WebRequest -Uri $DownloadUrl -OutFile unbound-latest.tar.gz
        tar -xzf unbound-latest.tar.gz
        # The extracted folder name might vary (e.g., unbound-1.23.0). We need to find it.
        $ExtractedFolderName = (Get-ChildItem -Directory -Filter "unbound-*" | Select-Object -First 1).Name
        if (-not $ExtractedFolderName) {
          Write-Error "Could not find extracted Unbound folder."
          exit 1
        }
        Move-Item -Path "$ExtractedFolderName" -Destination "unbound-src"
        Set-Location "unbound-src"
        Write-Host "Successfully downloaded and extracted Unbound to $(Get-Location)"

    - name: Configure Unbound Build
      shell: cmd
      working-directory: ./unbound-src
      run: |
        REM Adjust configure options as needed. Consult Unbound documentation for Windows.
        REM This assumes configure script can run in cmd or you might need to use bash (e.g., from Git)
        REM For MSVC, often a specific .mak file or solution is used, or configure generates one.
        REM The configure script might need adjustments or a Windows-specific batch file might exist.

        REM Example if using configure with OpenSSL paths (adjust paths as per Chocolatey installation):
        REM For OpenSSL 3.x installed by Chocolatey, paths might be C:\Program Files\OpenSSL-Win64
        SET OPENSSL_ROOT_DIR=C:\Progra~1\OpenSSL-Win64
        IF NOT EXIST "%OPENSSL_ROOT_DIR%\include\openssl\ssl.h" (
          SET OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL
          IF NOT EXIST "%OPENSSL_ROOT_DIR%\include\openssl\ssl.h" (
             SET OPENSSL_ROOT_DIR=C:\ProgramData\chocolatey\lib\OpenSSL.Light\tools\OpenSSL-Win64
          )
        )
        ECHO Using OPENSSL_ROOT_DIR: %OPENSSL_ROOT_DIR%

        REM Check if configure script exists. If not, Unbound might use a different system for Windows (e.g. CMake, solution file).
        IF EXIST configure (
          sh configure --with-ssl="%OPENSSL_ROOT_DIR%" --with-libexpat="C:/ProgramData/chocolatey/lib/expat/tools" --enable-static-exe --enable-fully-static
          REM Add other flags as needed, e.g., --prefix for install location
        ) ELSE IF EXIST Makefile.mvc (
          ECHO Found Makefile.mvc, will use nmake.
          REM You might need to set INCLUDE and LIB environment variables here if not done by msvc-dev-cmd
          SET INCLUDE=%INCLUDE%;%OPENSSL_ROOT_DIR%\include
          SET LIB=%LIB%;%OPENSSL_ROOT_DIR%\lib
          REM Check if expat is needed and add its paths
        ) ELSE (
          ECHO "No standard configure script or Makefile.mvc found. Check Unbound's Windows build instructions."
          EXIT /B 1
        )

    - name: Compile Unbound
      shell: cmd
      working-directory: ./unbound-src
      run: |
        REM If configure script was used and generated Makefiles for nmake:
        IF EXIST Makefile (
          nmake
          REM nmake install # Optionally, if you want to "install" it to a staging directory
        ) ELSE IF EXIST Makefile.mvc (
          nmake -f Makefile.mvc
          REM nmake -f Makefile.mvc install
        ) ELSE (
          ECHO "Cannot determine build method. No Makefile or Makefile.mvc found."
          EXIT /B 1
        )

    - name: List Build Output
      shell: pwsh
      working-directory: ./unbound-src
      run: |
        Get-ChildItem . -Recurse -Include unbound.exe, unbound-checkconf.exe, unbound-anchor.exe, libunbound.dll, *.pdb | Select-Object FullName
        # Adjust based on actual output files and locations

    - name: Create Release Artifacts Directory
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path staging

    - name: Copy Binaries to Staging Directory
      shell: pwsh
      working-directory: ./unbound-src
      run: |
        # Adjust paths and filenames based on where the build process outputs the files
        # Common locations might be the root of unbound-src, or a 'bin' or 'Release' subdirectory
        $Binaries = @(
            "unbound.exe",
            "unbound-checkconf.exe",
            "unbound-anchor.exe",
            "libunbound.dll" # If a DLL is produced
            # Add .pdb files if you want to archive debug symbols
        )
        foreach ($binary in $Binaries) {
            $foundFiles = Get-ChildItem . -Recurse -Filter $binary -ErrorAction SilentlyContinue
            if ($foundFiles) {
                $foundFiles | Copy-Item -Destination ../staging -Force
                Write-Host "Copied $($foundFiles.FullName) to staging"
            } else {
                Write-Warning "Could not find $binary in the build output."
            }
        }
        # Copy license and example config if desired
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" -Destination "../staging" }
        if (Test-Path "doc/example.conf") { Copy-Item "doc/example.conf" -Destination "../staging" }


    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: unbound-windows-${{ matrix.arch }}-${{ steps.get_latest_release.outputs.release }}
        path: staging/
        if-no-files-found: error # Fails the workflow if no files are found to upload